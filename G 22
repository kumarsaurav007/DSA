# Maximum Manhattan Distance After K Changes :-

class Solution:
    def maxDistance(self, s: str, k: int) -> int:
        n = len(s)
        dx = {'N': 0, 'S': 0, 'E': 1, 'W': -1}
        dy = {'N': 1, 'S': -1, 'E': 0, 'W': 0}

        x = y = 0
        max_dist = 0

        for i in range(n):
            # Move as per current direction
            x += dx[s[i]]
            y += dy[s[i]]
            max_dist = max(max_dist, min(abs(x) + abs(y) + 2 * k, i + 1))

        # Each change can increase Manhattan distance by at most 2
        return max_dist

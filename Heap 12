# Find Minimum Time to Reach Last Room I :-

def minTimeToReach(self, moveTime: List[List[int]]) -> int:
        n, m = len(moveTime), len(moveTime[0])
        visited = [[float('inf')] * m for _ in range(n)]
        visited[0][0] = 0

        heap = [(0, 0, 0)]  # (time, x, y)
        directions = [(-1,0), (1,0), (0,-1), (0,1)]

        while heap:
            time, x, y = heapq.heappop(heap)

            if (x, y) == (n - 1, m - 1):
                return time

            for dx, dy in directions:
                nx, ny = x + dx, y + dy

                if 0 <= nx < n and 0 <= ny < m:
                    next_time = max(time, moveTime[nx][ny]) + 1

                    if next_time < visited[nx][ny]:
                        visited[nx][ny] = next_time
                        heapq.heappush(heap, (next_time, nx, ny))

        return -1

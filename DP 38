# Count the Number of Ideal Arrays :-

def idealArrays(self, n: int, maxValue: int) -> int:
        import math
        from collections import defaultdict, deque

        MOD = 10 ** 9 + 7

        # Precompute factorials and inverse factorials for combinations
        N = n + 14  # Max depth of divisor chains
        fact = [1] * (N)
        inv_fact = [1] * (N)
        for i in range(1, N):
            fact[i] = fact[i - 1] * i % MOD
        inv_fact[N - 1] = pow(fact[N - 1], MOD - 2, MOD)
        for i in range(N - 2, -1, -1):
            inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD

        def comb(a, b):
            if b < 0 or b > a:
                return 0
            return fact[a] * inv_fact[b] % MOD * inv_fact[a - b] % MOD

        # dp[i] = number of ways to build divisor chains starting with i
        # and record how many sequences of length l can start with i
        max_depth = 14
        cnt = [ [0] * (max_depth + 1) for _ in range(maxValue + 1)]

        for i in range(1, maxValue + 1):
            cnt[i][1] = 1  # base: length-1 sequence [i]
        
        for l in range(2, max_depth + 1):
            for i in range(1, maxValue + 1):
                for j in range(2 * i, maxValue + 1, i):
                    cnt[j][l] = (cnt[j][l] + cnt[i][l - 1]) % MOD

        ans = 0
        for i in range(1, maxValue + 1):
            for l in range(1, max_depth + 1):
                ways = cnt[i][l]
                # Number of ways to place l values in array of length n
                # with increasing indices: comb(n - 1, l - 1)
                ans = (ans + ways * comb(n - 1, l - 1)) % MOD

        return ans

# Soup Servings :-

def soupServings(self, n: int) -> float:
        # Quick optimization: for large n the result approaches 1
        if n == 0:
            return 0.5
        if n >= 4800:  # threshold used commonly; you can use 200 after scaling
            return 1.0

        # scale down by 25 and ceil
        units = math.ceil(n / 25)

        @functools.lru_cache(None)
        def dp(a, b):
            # base cases
            if a <= 0 and b <= 0:
                return 0.5
            if a <= 0:
                return 1.0
            if b <= 0:
                return 0.0

            # recurrence: each of the 4 operations equally likely
            return 0.25 * (
                dp(a - 4, b) +
                dp(a - 3, b - 1) +
                dp(a - 2, b - 2) +
                dp(a - 1, b - 3)
            )

        return dp(units, units)

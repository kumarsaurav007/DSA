# N-Queens :-

def solveNQueens(self, n: int) -> List[List[str]]:
        temp = []
        board = [['.' for _ in range(n)] for _ in range(n)]
        self.nQueens(temp, board, 0, n)
        return [[''.join(row) for row in res] for res in temp]

    def nQueens(self, temp, board, row, n):
        if row == n:
            temp.append([row.copy() for row in board])
            return
        for col in range(n):
            if self.isValid(board, row, col, n):
                board[row][col] = 'Q'
                self.nQueens(temp, board, row+1, n)
                board[row][col] = '.'

    def isValid(self, board, row, col, n):
        for i in range(row):
            if board[i][col] == 'Q':
                return False

        i, j = row, col
        while i >= 0 and j >= 0:
            if board[i][j] == 'Q':
                return False
            i-=1
            j-=1

        i, j = row, col
        while i >= 0 and j < n:
            if board[i][j] == 'Q':
                return False
            i-=1
            j+=1

        return True

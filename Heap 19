# Swim in Rising Water :-

def swimInWater(self, grid: List[List[int]]) -> int:
        n = len(grid)
        visited = set()
        heap = [(grid[0][0], 0, 0)]  # (height, row, col)
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
        res = 0

        while heap:
            height, r, c = heapq.heappop(heap)
            res = max(res, height)
            if (r, c) == (n - 1, n - 1):
                return res

            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited:
                    visited.add((nr, nc))
                    heapq.heappush(heap, (grid[nr][nc], nr, nc))

        return res

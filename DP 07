# Target Sum :-

def findTargetSumWays(self, nums: List[int], target: int) -> int:
        total_sum = sum(nums)
        
        if (target + total_sum) % 2 != 0 or abs(target) > total_sum:
            return 0

        X = (target + total_sum) // 2
        n = len(nums)
        dp = [[0]* (X+1) for _ in range(n+1)]
        dp[0][0] = 1
        for i in range(1, n+1):
            for j in range(X+1):
                dp[i][j] = dp[i-1][j]
                if j >= nums[i-1]:
                    dp[i][j] += dp[i-1][j-nums[i-1]]
        return dp[n][X] 

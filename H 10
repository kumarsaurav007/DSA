# Minimum Window Substring :-

def minWindow(self, s: str, t: str) -> str:
        if not s or not t:
            return ""
        
        dictT = defaultdict(int)
        for c in t:
            dictT[c] += 1

        n = len(dictT)
        l, r = 0, 0
        formed = 0
        window_count = defaultdict(int)
        ans = [-1, 0, 0]

        while r < len(s):
            c = s[r]
            window_count[c] += 1

            if c in dictT and window_count[c] == dictT[c]:
                formed += 1

            while l <= r and formed == n:
                c = s[l]
                if ans[0] == -1 or r-l+1 < ans[0]:
                    ans[0] = r-l+1
                    ans[1] = l
                    ans[2] = r

                window_count[c] -= 1
                if c in dictT and window_count[c] < dictT[c]:
                    formed -= 1
                l+=1
            r+=1
        return "" if ans[0] == -1 else s[ans[1]:ans[2]+1]

# Number of Ways to Arrive at Destination Solved :-

def countPaths(self, n: int, roads: List[List[int]]) -> int:
        MOD = 10**9 + 7
        
        # Step 1: Build the graph (Adjacency List)
        graph = defaultdict(list)
        for u, v, time in roads:
            graph[u].append((v, time))
            graph[v].append((u, time))

        # Step 2: Initialize data structures
        dist = [float('inf')] * n  # Shortest distance to each node
        ways = [0] * n  # Number of ways to reach each node
        dist[0] = 0
        ways[0] = 1
        pq = [(0, 0)]  # (distance, node)

        # Step 3: Dijkstraâ€™s Algorithm
        while pq:
            curr_time, node = heapq.heappop(pq)

            # If the popped node has a greater distance, skip it
            if curr_time > dist[node]:
                continue

            for neighbor, time in graph[node]:
                new_time = curr_time + time

                # If a shorter path is found
                if new_time < dist[neighbor]:
                    dist[neighbor] = new_time
                    ways[neighbor] = ways[node]
                    heapq.heappush(pq, (new_time, neighbor))

                # If another shortest path is found
                elif new_time == dist[neighbor]:
                    ways[neighbor] = (ways[neighbor] + ways[node]) % MOD

        return ways[n-1]

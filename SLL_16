# Design Linked List :-

class Node:
    def __init__(self, val):
        self.val = val
        self.next = None

class MyLinkedList:

    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0

    def get(self, index: int) -> int:
        if index >= self.length or index < 0:
            return -1
        curr = self.head

        while index:
            curr = curr.next
            index -= 1
        return curr.val

    def addAtHead(self, val: int) -> None:
        newNode = Node(val)
        self.head, newNode.next = newNode, self.head
        if not self.tail:
            self.tail = self.head
        self.length += 1

    def addAtTail(self, val: int) -> None:
        newNode = Node(val)
        if self.head:
            self.tail.next, self.tail = newNode, newNode
        else:
            self.head = self.tail = newNode
        self.length += 1

    def addAtIndex(self, index: int, val: int) -> None:
        if index > self.length:
            return
        elif index == self.length:
            self.addAtTail(val)
        elif index == 0:
            self.addAtHead(val)
        else:
            curr = self.head
            index -= 1
            while index:
                curr = curr.next
                index -= 1
            newNode = Node(val)
            curr.next, newNode.next = newNode, curr.next
            self.length += 1

    def deleteAtIndex(self, index: int) -> None:
        if index >= self.length:
            return
        elif index == 0:
            self.head = self.head.next
        else:
            curr = self.head
            i = index - 1
            while i:
                curr = curr.next
                i -= 1
            curr.next = curr.next.next
            if index == self.length - 1:
                self.tail = curr
        self.length -= 1
        if self.length == 0:
            self.head = self.tail = None

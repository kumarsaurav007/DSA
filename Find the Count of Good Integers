class Solution:
    def countGoodIntegers(self, n: int, k: int) -> int:
        if n == 1: return 9//k
        k_palindrome, ans = set(), 0

        palindrome_left = product(*[digits[1:]]+[digits] *((n-1)//2))
       
        for pal_left in palindrome_left:

            pal_rght = pal_left[::-1][n%2:]     
            palindrome = ''.join(((*pal_left, *pal_rght)))

            if int(palindrome)%k == 0:                      
                k_palindrome.add(''.join(sorted(palindrome)))

        for k_pal in k_palindrome:

            ctr = Counter(k_pal)                         
            denom = reduce(mul, map(factorial, ctr.values()))
            ans+= factorial(n)*(n - ctr['0'])//(denom * n)
            
        return ans
